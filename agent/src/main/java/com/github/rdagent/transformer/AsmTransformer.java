package com.github.rdagent.transformer;

import java.lang.instrument.ClassFileTransformer;
import java.lang.instrument.IllegalClassFormatException;
import java.security.ProtectionDomain;
import java.util.ArrayList;
import java.util.List;

import com.github.rdagent.AgentOptions;
import com.github.rdagent.loader.Agent3rdPartyClassloader;
import com.github.rdagent.transformer.handler.AppHandler;
import com.github.rdagent.transformer.handler.DefaultServletAdatper;
import com.github.rdagent.transformer.handler.DubboHandler;
import com.github.rdagent.transformer.handler.FeignHandler;
import com.github.rdagent.transformer.handler.HystrixClientHandler;
//import com.github.rdagent.transformer.handler.ServletHandler;
import com.github.rdagent.transformer.handler.SpringRabbitHandler;
import com.github.rdagent.transformer.handler.SpringSimpleClientHandler;
//import com.github.rdagent.transformer.handler.Struts2Handler;

public class AsmTransformer implements ClassFileTransformer {
	
	private List<TransformHandler> hanlderList = new ArrayList<TransformHandler>();
	
	public AsmTransformer() throws InstantiationException, IllegalAccessException {
		//register every bytecode manipulator
		//register fixed handler
		registerHandler(new AppHandler());
		registerHandler(new DubboHandler());
		registerHandler(new FeignHandler());
		registerHandler(new HystrixClientHandler());
		registerHandler(new SpringSimpleClientHandler());
		registerHandler(new SpringRabbitHandler());
		//registerHandler(new ServletHandler());
		//registerHandler(new Struts2Handler());
		
		//register custom handler
		for(Class<?> c : Agent3rdPartyClassloader.getClassloader().getSelfRegisterClasses()) {
			registerHandler((TransformHandler) c.newInstance());
		}
		
		for(TransformHandler h : hanlderList) {
			if(h instanceof DefaultServletAdatper) {
				AgentOptions.storeHandlerNames(((DefaultServletAdatper)h).injectClassNameList(),
						h.getClass().getName());
			}
		}
	}
	
	private void registerHandler(TransformHandler handler) {
		int i=0;
		for(;i<hanlderList.size();i++) {
			if(handler.getPriority()<hanlderList.get(i).getPriority()) {
				break;
			}
		}
		hanlderList.add(i, handler);
	}
	
	//filter some classes dynamically generated by popular developing frameworks
	private String[] staticNameFilters = { "ByCGLIB",
			"_asm",
			"BySpringCGLIB",
			"_WrapperTypeHelper"
	};
	
	@Override
	public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined,
			ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
		try {
			//System.out.println("uniqueT debug +++ name : "+className);
			if(className==null || staticFilter(className)) {
				return null;
			}
			for(int i=0;i<hanlderList.size();i++) {
				if(hanlderList.get(i).filterClassName(className)) {
					System.out.println("uniqueT debug +++ name : "+className);
					return hanlderList.get(i).process(className, classfileBuffer);
				}
			}
		} catch (Exception e) {
			System.err.println("uniqueT debug +++ err class: "+className);
			e.printStackTrace();
		}

		return null;
	}

	private boolean staticFilter(String className) {
		for(String scope : staticNameFilters) {
			if(className.contains(scope)) {
				return true;
			}
		}
		return false;
	}
	
	/**
	 * filter which classes shoud be retransform
	 * @param cs
	 * @return
	 */
	@SuppressWarnings("rawtypes")
	public Class[] retransFilter(Class[] cs) {
		List<Class> returnClass = new ArrayList<Class>();
		for(Class c : cs) {
			if(c == null) {
				continue;
			}else{
				String className = c.getName().replaceAll("\\.", "/");
				for(int i=0;i<hanlderList.size();i++) {
					if(!staticFilter(className) && hanlderList.get(i).filterClassName(className)) {
						returnClass.add(c);
						break;
					}
				}
			}
		}
		Class[] carray = new Class[returnClass.size()];
		return returnClass.toArray(carray);
	}

}
